<<sort.h>>=
#ifndef SORT_H
#define SORT_H

#include <stddef.h>

/**
 * Swaps the two values.
 *
 * @param a the first parameter.
 * @param b the second parameter.
 */
void swap(int *a, int *b);

/**
 * Creates a new array containing the bucket count
 * from bucketsort.
 *
 * @param a the array to use to initialize the buckets.
 * @param length the length of the array.
 * @param max the maximum value of the elements in the array.
 * @return an array with the bucket count from bucketsort.
 */
int *buckets_new(int a[], size_t length, int max);

/** Various sort implementations */
void selectionsort(int a[], size_t length);
void insertionsort(int a[], size_t length);
void _mergesort(int a[], size_t length);
void quicksort(int a[], size_t length);
void bucketsort(int a[], size_t length, int max);

/**
 * Merge portion of mergesort.
 *
 * @param a the array to merge.
 * @param l the start of the array.
 * @param m the middle of the array.
 * @param h the end of the array.
 */
void merge(int a[], int l, int m, int h);

/**
 * Quickly selects the kth ordered element from the list.
 *
 * @param a the array to get the kth element from.
 * @param length the length of the array.
 * @param k the index of the ordered element to obtain.
 * @return the element at the specified ordered position
 * 	in the array.
 */
int quickselect(int a[], size_t length, size_t k);

#endif /* SORT_H */
@
<<sort.c>>=
#include <contract.h>
#include "../lang/type.h"
#include "../util/linked_queue.h"
#include "sort.h"

#include <stdlib.h>

void swap(int *a, int *b) {
  contract_requires_non_null(a);
  contract_requires_non_null(b);
  int t = *a;
  *a = *b, *b = t;
}

void selectionsort(int a[], size_t length) {
  contract_requires_non_null(a);
  int i;
  for (i = 0; i < length; i++) {
    int min = i;
    int j;
    for (j = i; j < length; j++)
      if (a[j] < a[min])
        min = j;
    if (min != i)
      swap(&a[i], &a[min]);
  }
}

void insertionsort(int a[], size_t length) {
  contract_requires_non_null(a);
  int i, j;
  for (i = 1; i < length; i++)
    for (j = i; j > 0 && a[j - 1] > a[j]; j--)
      swap(&a[j], &a[j - 1]);
}

static bool queue_empty(const Queue *q) {
  return container_empty((const Container *)q);
}

void merge(int a[], int l, int m, int h) {
  Queue *lq = linked_queue_new();
  Queue *hq = linked_queue_new();

  int i;
  for (i = l; i <= m; i++)
    queue_enqueue(lq, INT_TO_POINTER(a[i]));
  for (; i <= h; i++)
    queue_enqueue(hq, INT_TO_POINTER(a[i]));

  for (i = l; !queue_empty(lq) && !queue_empty(hq); i++)
    a[i] = POINTER_TO_INT(queue_dequeue(
        POINTER_TO_INT(queue_head(lq)) <= POINTER_TO_INT(queue_head(hq)) ? lq
                                                                         : hq));

  for (; !queue_empty(lq); i++)
    a[i] = POINTER_TO_INT(queue_dequeue(lq));
  for (; !queue_empty(hq); i++)
    a[i] = POINTER_TO_INT(queue_dequeue(hq));

  object_free((Object *)lq);
  object_free((Object *)hq);
}

static void __mergesort(int a[], int l, int h) {
  if (l < h) {
    int m = (l + h) / 2;
    __mergesort(a, l, m);
    __mergesort(a, m + 1, h);
    merge(a, l, m, h);
  }
}

void _mergesort(int a[], size_t length) {
  return __mergesort(contract_requires_non_null(a), 0, (int)length - 1);
}

static size_t partition(int a[], size_t l, size_t h) {
  size_t i, p = l;
  for (i = l; i < h; i++)
    if (a[i] < a[h]) {
      swap(&a[i], &a[p]);
      p++;
    }
  swap(&a[h], &a[p]);
  return p;
}

static int qs(int a[], size_t l, size_t h, size_t k) {
  size_t p = partition(a, l, h);
  if (k == p)
    return a[p];
  return k < p ? qs(a, l, p == 0 ? 0 : p - 1, k) : qs(a, p + 1, h, k);
}

int quickselect(int a[], size_t length, size_t k) {
  contract_requires(k < length);
  return qs(contract_requires_non_null(a), 0, length - 1, k);
}

static void _quicksort(int a[], size_t l, size_t h) {
  if (l < h) {
    size_t p = partition(a, l, h);
    _quicksort(a, l, p == 0 ? 0 : p - 1);
    _quicksort(a, p + 1, h);
  }
}

void quicksort(int a[], size_t length) {
  if (length > 0)
    _quicksort(contract_requires_non_null(a), 0, length - 1);
}

int *buckets_new(int a[], size_t length, int max) {
  contract_requires_non_null(a);
  int *s = calloc((size_t)(max + 1), sizeof(int));
  size_t i;
  for (i = 0; i < length; i++)
    s[a[i]]++;
  return s;
}

void bucketsort(int a[], size_t length, int max) {
  contract_requires_non_null(a);
  int s[max + 1];

  int i, j, k;
  for (i = 0; i <= max; i++)
    s[i] = 0;
  for (i = 0; i < length; i++)
    s[a[i]]++;

  j = 0;
  for (i = 0; i <= max; i++)
    for (k = 0; k < s[i]; k++)
      a[j++] = i;
}
@
