<<compare.c>>=
#include "type.h"
#include "compare.h"

int compare_int_pointer(const void *a, const void *b) {
  return POINTER_TO_INT(a) - POINTER_TO_INT(b);
}

int compare_int(const void *a, const void *b) {
  return *((int *)a) - *((int *)b);
}

int compare_float(const void *a, const void *b) {
  float d = *(float *)a - *(float *)b;
  if ((d < 1 && d > 0) || (d > -1 && d < 0))
    return d == 0 ? 0 : (d < 0 ? -1 : 1);
  return (int)d;
}

int compare_double(const void *a, const void *b) {
  double d = *(double *)a - *(double *)b;
  if ((d < 1 && d > 0) || (d > -1 && d < 0))
    return d == 0 ? 0 : (d < 0 ? -1 : 1);
  return (int)d;
}
@
<<compare.h>>=
#ifndef COMPARE_H
#define COMPARE_H

/**
 * Compares two objects for ordering.
 *
 * @param a the first object.
 * @param b the second object.
 * @return < 0 if a < b, 0 if a == b, > 0 if a > b
 */
typedef int (*Compare)(const void *a, const void *b);

// Compares two integers stored as pointers.
extern int compare_int_pointer(const void *, const void *);

// Normal qsort style comparison functions
extern int compare_int(const void *, const void *);
extern int compare_float(const void *, const void *);
extern int compare_double(const void *, const void *);

#endif /* COMPARE_H */
@
