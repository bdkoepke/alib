<<edge-node.h>>=
#ifndef EDGE_NODE_H
#define EDGE_NODE_H

#include "../lang/compare.h"
#include "container.h"

typedef struct _edge_node_vtable edge_node_vtable;
typedef struct {
  edge_node_vtable *vtable;
} EdgeNode;
struct _edge_node_vtable {
  container_vtable container;
  void *(*get)(const EdgeNode *);
  void (*set)(EdgeNode *, void *);
};

EdgeNode *edge_node_new(void *x);
void *edge_node_get(const EdgeNode *e);
void edge_node_set(EdgeNode *e, void *x);

#endif /* EDGE_NODE_H */
@
<<edge-node.c>>=
#include "../diag/contract.h"
#include "edge_node.h"
#include "linked_stack.h"

#include <stdlib.h>

typedef struct {
  edge_node_vtable *vtable;
  void *x;
  LinkedStack *s;
} _EdgeNode;

static void edge_node_free(Object *o) {
  object_free((Object *)((_EdgeNode *)o)->s);
  free(o);
}

static Iterator *edge_node_iterator(const Iterable *i) {
  return iterable_iterator((const Iterable *)((_EdgeNode *)i)->s);
}

static void edge_node_insert(Container *c, void *x) {
  container_insert((Container *)((_EdgeNode *)c)->s, x);
}

static void *edge_node_search(const Container *c, const void *x) {
  return container_search((Container *)((_EdgeNode *)c)->s, x);
}

static void *edge_node_delete(Container *c, const void *x) {
  return container_delete((Container *)((_EdgeNode *)c)->s, x);
}

static bool edge_node_empty(const Container *c) {
  return container_empty((Container *)((_EdgeNode *)c)->s);
}

static void *_edge_node_get(const EdgeNode *e) {
  return ((const _EdgeNode *)e)->x;
}

static void _edge_node_set(EdgeNode *e, void *x) { ((_EdgeNode *)e)->x = x; }

EdgeNode *edge_node_new(void *x) {
  static edge_node_vtable vtable = {
    { { { .class = { "edge_node" },
          .free = edge_node_free,
          .to_string = _object_to_string },
        .iterator = edge_node_iterator },
      .insert = edge_node_insert, .search = edge_node_search,
      .empty = edge_node_empty, .delete = edge_node_delete },
    .get = _edge_node_get, .set = _edge_node_set
  };
  _EdgeNode *e = malloc(sizeof(_EdgeNode));
  e->x = x;
  e->s = linked_stack_new();
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreturn-stack-address"
  e->vtable = &vtable;
#pragma clang diagnostic pop
  return (EdgeNode *)e;
}

void *edge_node_get(const EdgeNode *e) {
  return e->vtable->get(contract_requires_non_null(e));
}

void edge_node_set(EdgeNode *e, void *x) {
  e->vtable->set(contract_requires_non_null(e), x);
}
@
