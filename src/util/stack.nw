<<stack.h>>=
#ifndef STACK_H
#define STACK_H

#include "container.h"

#include <stdbool.h>

typedef struct _stack_vtable stack_vtable;
typedef struct Stack {
  stack_vtable *vtable;
} Stack;
struct _stack_vtable {
  container_vtable container;
  void (*push)(Stack *, void *);
  void *(*pop)(Stack *);
  void *(*peek)(const Stack *);
};

/**
 * Pushes the specified object onto the stack.
 *
 * @param s the stack to push the object onto.
 * @param x the object to push onto the stack.
 */
void stack_push(Stack *s, void *x);

/**
 * Removes and returns the top object from the stack.
 *
 * @param s the stack to get the object from.
 * @return the object on the top of the stack.
 */
void *stack_pop(Stack *s);

/**
 * Retrieves but does not remove the top object from the stack.
 *
 * @param s the stack to get the object from.
 * @return the object on the top of the stack.
 */
void *stack_peek(const Stack *s);

void _stack_insert(Container *c, void *x);

void _stack_free(Object *o);

#endif /* STACK_H */
@
<<stack.c>>=
#include <contract.h>
#include "stack.h"

#include <stdlib.h>

void stack_push(Stack *s, void *x) {
  s->vtable->push(contract_requires_non_null(s), x);
  contract_weak_ensures(!container_empty((Container *)s));
}

void *stack_pop(Stack *s) {
  contract_requires(!container_empty((Container *)s));
  return s->vtable->pop(contract_requires_non_null(s));
}

void *stack_peek(const Stack *s) {
  contract_requires(!container_empty((Container *)s));
  return s->vtable->peek(contract_requires_non_null(s));
}

void _stack_insert(Container *c, void *x) { stack_push((Stack *)c, x); }

void _stack_free(Object *o) {
  Stack *s = (Stack *)o;
  while (!container_empty((Container *)s))
    stack_pop(s);
  free(o);
}
@
