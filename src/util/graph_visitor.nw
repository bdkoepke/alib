<<graph-visitor.h>>=
#ifndef GRAPH_VISITOR_H
#define GRAPH_VISITOR_H

#include <object.h>

typedef struct _graph_visitor_vtable graph_visitor_vtable;
typedef struct {
  graph_visitor_vtable *vtable;
} GraphVisitor;
struct _graph_visitor_vtable {
  object_vtable object;
  void (*vertex_early)(GraphVisitor *, const void *);
  void (*edge)(GraphVisitor *, const void *, const void *);
  void (*vertex_late)(GraphVisitor *, const void *);
};

void graph_visitor_vertex_early(GraphVisitor *g, const void *v);
void graph_visitor_edge(GraphVisitor *g, const void *x, const void *y);
void graph_visitor_vertex_late(GraphVisitor *g, const void *v);

#endif /* GRAPH_VISITOR_H */
@
<<graph-visitor.c>>=
#include <contract.h>
#include "graph_visitor.h"

void graph_visitor_vertex_early(GraphVisitor *g, const void *v) {
  return g->vtable->vertex_early(contract_requires_non_null(g),
                                 contract_requires_non_null(v));
}

void graph_visitor_edge(GraphVisitor *g, const void *x, const void *y) {
  return g->vtable->edge(contract_requires_non_null(g),
                         contract_requires_non_null(x),
                         contract_requires_non_null(y));
}

void graph_visitor_vertex_late(GraphVisitor *g, const void *v) {
  return g->vtable->vertex_late(contract_requires_non_null(g),
                                contract_requires_non_null(v));
}
@
