<<chapter-4.h>>=
#ifndef CHAPTER_4_H
#define CHAPTER_4_H

#include <stddef.h>

/**
 * Counts the number of occurrences of the element x
 * in the specified array.
 *
 * @param a the array to search.
 * @param length the length of the array.
 * @param x the element to search for.
 * @return the number of occurrences of the element.
 */
size_t count_occurrences(int a[], size_t length, int x);

/**
 * Computes max and min in $n + ceiling(\frac{n}{2})$ comparisons.
 *
 * @param a the array to find the max and min of. The array itself is used as
 * 	scratch space for the computation.
 * @param length the length of the array.
 * @param out_max the result maximum value.
 * @param out_min the result minimum value.
 */
void max_min(int *a, size_t length, int *out_max, int *out_min);

/** Basic lang tests. */
void _test_heap(void);
void _test_vector(void);
void test_binary_search(void);
void test_binary_sort(void);
void test_bucketsort(void);
void test_count_occurrences(void);
void test_max_min(void);
void test_mergesort(void);
void test_quicksort(void);
void test_sqrt(void);

void question_4_1(void);
void question_4_2(void);
void question_4_3(void);
void question_4_4(void);
void question_4_5(void);
void question_4_6(void);

void question_4_8(void);
void question_4_9(void);
void question_4_10(void);
void question_4_11(void);
void question_4_12(void);

void question_4_14(void);
void question_4_15(void);
void question_4_16(void);

void question_4_18(void);
void question_4_20(void);

void question_4_23(void);
void question_4_24(void);
void question_4_25(void);
void question_4_26(void);
void question_4_27(void);

void question_4_31(void);

void question_4_33(void);
void question_4_34(void);
void question_4_35(void);

void question_4_44(void);
void question_4_45(void);
void question_4_46(void);

#endif /* CHAPTER_4_H */
@
<<chapter-4.c>>=
#include "chapter_4.h"
#include "diag/contract.h"
#include "lang/algorithm.h"
#include "lang/array.h"
#include "lang/math_extended.h"
#include "lang/sort.h"
#include "lang/type.h"
#include "test/test.h"
#include "test/test_container.h"
#include "test/test_container_values.h"
#include "test/test_sort.h"
#include "util/color_array.h"
#include "util/linked_queue.h"

#include <assert.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void _test_heap(void) {
  puts("test_heap");
  Heap *h = heap_new(compare_int_pointer);
  test_heap_empty(h, test_values, test_values_length);
  object_free((Object *)h);

  h = heap_new(compare_int_pointer);
  test_heap_empty(h, test_values_extended, test_values_extended_length);
  object_free((Object *)h);

  void **mutable_test_values = malloc(sizeof(void *) * test_values_length);
  size_t i;
  for (i = 0; i < test_values_length; i++)
    mutable_test_values[i] = INT_TO_POINTER(test_values[i]);
  h = heap_new_from_array(compare_int_pointer, mutable_test_values,
                          test_values_length);
  test_heap(h, test_values, test_values_length);
  object_free((Object *)h);

  mutable_test_values = malloc(sizeof(void *) * test_values_extended_length);
  for (i = 0; i < test_values_extended_length; i++)
    mutable_test_values[i] = INT_TO_POINTER(test_values_extended[i]);
  h = heap_new_from_array(compare_int_pointer, mutable_test_values,
                          test_values_extended_length);
  test_heap(h, test_values_extended, test_values_extended_length);
  object_free((Object *)h);
}

void test_mergesort(void) {
  puts("test_mergesort");
  test_sort(_mergesort);
}

void test_quicksort(void) {
  puts("test_quicksort");
  test_sort(quicksort);
}

void test_binary_search(void) {
  puts("test_binary_search");
  static const int sorted[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
  size_t sorted_length = sizeof(sorted) / sizeof(int);

  size_t i;
  for (i = 0; i < sorted_length; i++)
    assert_equals(sorted[binary_search_int(sorted[i], sorted, sorted_length)],
                  sorted[i]);
}

static size_t right_boundary(int x, const int *a, size_t l, size_t h) {
  if (l > h)
    return l;
  size_t m = (l + h) / 2;
  return x < a[m] ? right_boundary(x, a, l, m - 1)
                  : right_boundary(x, a, m + 1, h);
}
static size_t left_boundary(int x, const int *a, size_t l, size_t h) {
  if (l > h)
    return l;
  size_t m = (l + h) / 2;
  return x < a[m] ? left_boundary(x, a, l, m - 1)
                  : left_boundary(x, a, m + 1, h);
}

size_t count_occurrences(int *s, size_t length, int x) {
  size_t right = right_boundary(x, s, 0, length - 1);
  size_t left = left_boundary(x, s, 0, length - 1);
  assert(s[left] == s[right]);
  return s[left] == x ? right - left : 0;
}

void test_count_occurrences(void) {
  puts("test_count_occurrences: partial implementation");
  /* int occurrences[] = { 1, 2, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9 };
        size_t occurrences_length = sizeof(occurrences) / sizeof(int);
        assert_equals(count_occurrences(3, occurrences, occurrences_length), 5);
     */
}

static int _one_sided_binary_search(int x, int *a, int i) {
  if (a[i - 1] == x)
    return binary_search_int(x, a, (size_t)i);
  return _one_sided_binary_search(x, a, i * 2);
}

int one_sided_binary_search(int x, int *a) {
  return _one_sided_binary_search(x, a, 1);
}

void test_one_sided_binary_search(void) {
  puts("test_one_sided_binary_search: partial implementation");
}

void test_sqrt(void) {
  puts("test_sqrt");
  const double p = 0.000001;
  double s = sqrt_int(9, p);
  assert_true(s - 3.0 < p && s - 3.0 > -p);
  s = sqrt_int(6512, p);
  assert_true(s - 80.696964007 < p && s - 80.696964007 > -p);
}

void partition_players(int *a, size_t length, int *team_a, int *team_b) {
  contract_requires(even((int)length));
  size_t half = length / 2;

  quicksort(a, length);

  size_t i;
  for (i = 0; i < half; i++) {
    team_a[i] = a[i];
    team_b[i] = a[i + half];
  }
}

void question_4_1(void) {
  puts("question_4_1");
  int players[] = { 3, 7, 4, 9, 5, 2, 6, 1 };
  size_t players_length = array_size(players);
  size_t team_size = players_length / 2;
  int team_a[team_size];
  int team_b[team_size];
  partition_players(players, players_length, team_a, team_b);
  int expected_team_a[] = { 1, 2, 3, 4 };
  int expected_team_b[] = { 5, 6, 7, 8 };
  assert_equals(memcmp(team_a, expected_team_a, team_size), 0);
  assert_equals(memcmp(team_b, expected_team_b, team_size), 0);
}

void max_min(int *a, size_t len, int *max, int *min) {
  contract_requires(len > 0);
  int _max = INT_MIN;
  int _min = INT_MAX;

  size_t len_half = (len / 2);
  size_t middle = even((int)len) ? len_half : len_half + 1;
  size_t i;
  for (i = 0; i < len_half; i++)
    if (a[i] > a[i + middle])
      swap(&a[i], &a[i + middle]);
  for (i = 0; i <= middle; i++)
    if (a[i] < _min)
      _min = a[i];
  for (i = len_half; i < len; i++)
    if (a[i] > _max)
      _max = a[i];
  *max = _max;
  *min = _min;
}

void test_max_min(void) {
  puts("test_max_min");
  int S[] = { 6, 13, 19, 3, 8 };
  int max, min;
  max_min(S, array_size(S), &max, &min);
  assert_equals(min, 3);
  assert_equals(max, 19);
  int _S[] = { 6, 13, 19, 3, 8, 20 };
  max_min(_S, array_size(_S), &max, &min);
  assert_equals(min, 3);
  assert_equals(max, 20);
}

void question_4_2(void) {
  puts("question_4_2");
  int S[] = { 6, 13, 19, 3, 8 };
  int max, min;
  max_min(S, array_size(S), &max, &min);
  assert_equals(max - min, 16);

  int sorted[] = { 3, 6, 8, 13, 19 };
  assert_equals(sorted[array_size(sorted) - 1] - sorted[0], 16);

  int s, e, d;
  d = INT_MAX;
  int i;
  for (i = 0; i < (array_size(sorted) - 1); i++)
    if (sorted[i + 1] - sorted[i] < d) {
      s = i;
      e = i + 1;
      d = sorted[e] - sorted[s];
    }
  assert_equals(d, 2);
}

typedef struct {
  int a, b;
} Tuple;

static void min_partition_pairs(int *a, int n, Tuple t[n / 2]) {
  contract_requires(even(n));
  quicksort(a, (size_t)n);
  size_t i;
  for (i = 0; i < (n / 2); i++) {
    Tuple u = { .a = a[i], .b = a[n - i - 1] };
    t[i] = u;
  }
}

void question_4_3(void) {
  puts("question_4_3");

  int numbers[] = { 1, 3, 5, 9 };
  int numbers_length = array_size(numbers);
  Tuple pairs[numbers_length / 2];
  min_partition_pairs(numbers, numbers_length, pairs);
  assert_equals(pairs[0].a, 1);
  assert_equals(pairs[0].b, 9);
  assert_equals(pairs[1].a, 3);
  assert_equals(pairs[1].b, 5);
}

void question_4_4(void) {
  puts("question_4_4");

  typedef enum {
    red = 0,
    blue = 1,
    yellow = 2
  } Color;

  typedef struct {
    int i;
    Color c;
  } ColorPair;

#pragma clang diagnostic push
#pragma ide diagnostic ignored "ImplicitIntegerAndEnumConversion"
  ColorPair pairs[] = {
    { 1, blue }, { 3, red }, { 4, blue }, { 6, yellow }, { 9, red }
  };
#pragma clang diagnostic pop
  size_t pairs_length = array_size(pairs);
  Queue *buckets[] = { linked_queue_new(), linked_queue_new(),
                       linked_queue_new() };

  size_t i;
  for (i = 0; i < pairs_length; i++)
    queue_enqueue(buckets[pairs[i].c], &pairs[i]);

  ColorPair sorted_pairs[pairs_length];
  size_t j = 0;
  for (i = 0; i < array_size(buckets); i++)
    while (!container_empty((Container *)buckets[i]))
      sorted_pairs[j++] = *(ColorPair *)queue_dequeue(buckets[i]);

#pragma clang diagnostic push
#pragma ide diagnostic ignored "ImplicitIntegerAndEnumConversion"
  ColorPair expected[] = {
    { 3, red }, { 9, red }, { 1, blue }, { 4, blue }, { 6, yellow }
  };
#pragma clang diagnostic pop

  for (i = 0; i < pairs_length; i++) {
    assert_equals(sorted_pairs[i].i, expected[i].i);
    assert_equals(sorted_pairs[i].c, expected[i].c);
  }

  for (i = 0; i < array_size(buckets); i++)
    object_free((Object *)buckets[i]);
}

static void _bucketsort(int a[], size_t n) {
  bucketsort(a, n, reduce_int(a, n, max, 0));
}

void test_bucketsort(void) {
  puts("test_bucketsort");

  test_sort(_bucketsort);
}

size_t find_mode(int a[], size_t len) {
  int *b = buckets_new(a, len, reduce_int(a, len, max, 0));

  int bucket_value = 0;
  int i, largest_bucket;
  for (i = largest_bucket = 0; i < len; i++)
    if (b[i] > largest_bucket) {
      largest_bucket = b[i];
      bucket_value = i;
    }
  free(b);
  return (size_t)bucket_value;
}

void question_4_5(void) {
  puts("question_4_5");
  int numbers[] = { 4, 6, 2, 4, 3, 1 };
  size_t numbers_length = array_size(numbers);
  assert_equals((int)find_mode(numbers, numbers_length), 4);
}

bool sum_pair_equals_x(int S_1[], int S_2[], size_t len, int x) {
  // TODO: ignores integer overflow, should also be able to early exit...
  contract_requires(S_1 != NULL && S_2 != NULL);

  quicksort(S_1, len);
  quicksort(S_2, len);
  size_t i;
  for (i = 0; i < len; i++)
    if (binary_search_int(x - S_1[i], S_2, len) != -1)
      return true;
  return false;
}

void question_4_6(void) {
  puts("question_4_6");
  int S_1[] = { 1, 2, 3, 4, 5, 6 };
  int S_2[] = { 7, 8, 9, 10, 11, 12 };

  assert_true(sum_pair_equals_x(S_1, S_2, array_size(S_1), 18));
  assert_false(sum_pair_equals_x(S_1, S_2, array_size(S_1), 19));
  assert_false(sum_pair_equals_x(S_1, S_2, array_size(S_1), 7));
  assert_true(sum_pair_equals_x(S_1, S_2, array_size(S_1), 8));
}

void question_4_8(void) { puts("question_4_8: not implemented"); }

void sorted_set_union(const int A[], const int B[], size_t A_len, size_t B_len,
                      int **U_p, size_t *U_len) {
  int *U = malloc(sizeof(int) * (A_len + B_len));

  size_t i, j, k;
  i = j = k = 0;
  while (i < A_len && j < B_len)
    if (A[i] == B[j]) {
      j++;
      U[k++] = A[i++];
    } else
      U[k++] = A[i] < B[j] ? A[i++] : B[j++];

  while (i < A_len)
    U[k++] = A[i++];
  while (j < B_len)
    U[k++] = B[j++];

  *U_p = realloc(U, k * sizeof(int));
  *U_len = k;
}

void set_union(int A[], int B[], size_t A_len, size_t B_len, int **U_p,
               size_t *U_len, Sort sort) {
  sort(A, A_len);
  sort(B, B_len);
  sorted_set_union(A, B, A_len, B_len, U_p, U_len);
}

void question_4_9(void) {
  puts("question_4_9");
  int A[] = { 139, 127, 218, 117, 1,   76,  186, 190, 165, 53,  123, 58,  189,
              42,  236, 72,  7,   67,  128, 23,  244, 206, 65,  203, 59,  137,
              144, 175, 61,  60,  66,  200, 16,  29,  208, 95,  187, 211, 131,
              28,  135, 146, 107, 162, 0,   82,  166, 223, 193, 41,  90,  181,
              79,  251, 18,  243, 216, 122, 118, 36,  12,  188, 195, 8,   113,
              56,  147, 149, 22,  98,  93,  210, 133, 84,  246, 220, 73,  227,
              9,   2,   192, 183, 152, 157, 71,  39,  198, 138, 212, 234, 142,
              47,  25,  202, 215, 37,  125, 50,  30,  109 };
  int B[] = { 79,  64,  199, 44,  194, 192, 250, 95,  149, 1,   227, 115, 223,
              226, 159, 243, 113, 127, 253, 165, 48,  75,  231, 164, 134, 179,
              193, 205, 236, 160, 19,  3,   126, 73,  210, 116, 169, 18,  37,
              16,  94,  162, 97,  86,  221, 122, 38,  208, 136, 46,  233, 5,
              17,  244, 55,  84,  137, 186, 142, 175, 28,  99,  202, 191, 156,
              112, 222, 220, 218, 76,  171, 245, 139, 242, 209 };
  int S[] = { 0,   1,   2,   3,   5,   7,   8,   9,   12,  16,  17,  18,  19,
              22,  23,  25,  28,  29,  30,  36,  37,  38,  39,  41,  42,  44,
              46,  47,  48,  50,  53,  55,  56,  58,  59,  60,  61,  64,  65,
              66,  67,  71,  72,  73,  75,  76,  79,  82,  84,  86,  90,  93,
              94,  95,  97,  98,  99,  107, 109, 112, 113, 115, 116, 117, 118,
              122, 123, 125, 126, 127, 128, 131, 133, 134, 135, 136, 137, 138,
              139, 142, 144, 146, 147, 149, 152, 156, 157, 159, 160, 162, 164,
              165, 166, 169, 171, 175, 179, 181, 183, 186, 187, 188, 189, 190,
              191, 192, 193, 194, 195, 198, 199, 200, 202, 203, 205, 206, 208,
              209, 210, 211, 212, 215, 216, 218, 220, 221, 222, 223, 226, 227,
              231, 233, 234, 236, 242, 243, 244, 245, 246, 250, 251, 253 };
  int *U;
  size_t length;
  set_union(A, B, array_size(A), array_size(B), &U, &length, quicksort);
  assert_memcmp(S, U);
  free(U);

  sorted_set_union(A, B, array_size(A), array_size(B), &U, &length);
  assert_memcmp(S, U);
  free(U);
}

void question_4_10(void) { puts("question_4_10: not implemented"); }

void get_elements_with_frequency(int S[], size_t length, int frequency,
                                 int **result, int *result_length) {
  contract_requires(frequency > 0);

  int _max = reduce_int(S, length, max, 0);
  int *b = buckets_new(S, length, _max);
  *result = malloc(sizeof(int) * (length / frequency));

  *result_length = 0;
  int i;
  for (i = 0; i <= _max; i++)
    if (b[i] > frequency)
      (*result)[(*result_length)++] = i;

  *result = realloc(*result, *result_length * sizeof(int));
  free(b);
}

void question_4_11(void) {
  puts("question_4_11");

  int S_2[] = { 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0,
                1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1,
                1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0,
                1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0,
                1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1 };
  int S_2_len = array_size(S_2);
  int S_4[] = { 0, 0, 3, 3, 0, 0, 2, 2, 1, 3, 3, 1, 1, 0, 1, 2, 1, 1, 1, 0,
                0, 1, 2, 0, 0, 0, 1, 3, 3, 3, 0, 0, 3, 3, 1, 1, 0, 0, 1, 1,
                1, 1, 3, 0, 0, 3, 0, 1, 0, 0, 2, 0, 3, 2, 1, 1, 0, 1, 3, 0,
                2, 2, 0, 0, 0, 2, 3, 2, 2, 3, 1, 0, 2, 1, 1, 2, 1, 1, 1, 1,
                0, 2, 0, 2, 2, 1, 2, 0, 1, 3, 1, 1, 3, 2, 1, 3, 2, 1, 2, 0 };
  int S_4_len = array_size(S_4);

  int *S_r;
  int r_length;

  int S_2_expected[] = { 1 };
  int S_4_expected[] = { 0, 1 };
  get_elements_with_frequency(S_2, (size_t)S_2_len, S_2_len / 2, &S_r,
                              &r_length);
  assert_memcmp(S_2_expected, S_r);
  assert_equals(r_length, 1);
  free(S_r);

  get_elements_with_frequency(S_4, (size_t)S_4_len, S_4_len / 4, &S_r,
                              &r_length);
  assert_memcmp(S_4_expected, S_r);
  assert_equals(r_length, 2);
  free(S_r);
}

void question_4_12(void) {
  puts("question_4_12");

  Heap *h = heap_new(compare_int_pointer);
  int S[] = { 7, 3, 4, 2, 1, 9, 8, 5, 6 };
  int sorted[] = { 1, 2, 3, 4, 5 };
  int k = array_size(sorted);

  size_t i;
  for (i = 0; i < array_size(S); i++)
    heap_insert(h, INT_TO_POINTER(S[i]));
  for (i = 0; i < k; i++)
    assert_equals(POINTER_TO_INT(heap_extract_min(h)), sorted[i]);
  object_free((Object *)h);
}

void question_4_14(void) {
  puts("question_4_14");

  int S_0[] = { 66, 73, 27, 57, 56, 84, 14, 1,  94,
                72, 28, 54, 51, 89, 95, 77, 90, 47 };
  int S_1[] = { 41, 34, 57, 40, 98, 78, 72, 77, 32, 11 };
  int S_2[] = { 44, 93, 11, 98, 28, 51, 35, 79, 55, 3, 90 };
  int S_3[] = { 62, 79, 55, 65, 73 };
  int S_4[] = { 37, 55, 88, 1, 45, 98 };
  int S_5[] = { 85, 73, 99, 80, 53, 59, 83, 86, 52, 19, 60 };
  int S_6[] = { 68, 38, 34, 52, 6, 95, 99, 49, 56, 11, 85 };
  int S_7[] = { 75, 27, 24, 6, 83, 21 };
  int S_8[] = { 53, 97, 31, 32, 91, 64, 55, 96, 23, 87, 95 };
  int S_9[] = { 56, 4, 74, 83, 2, 55, 23, 92, 19, 45, 26 };
  int S[] = { 1,  2,  3,  4,  6,  11, 14, 19, 21, 23, 24, 26, 27,
              28, 31, 32, 34, 35, 37, 38, 40, 41, 44, 45, 47, 49,
              51, 52, 53, 54, 55, 56, 57, 59, 60, 62, 64, 65, 66,
              68, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86,
              87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99 };
  int n = array_size(S);

  Heap *h = heap_new(compare_int_pointer);
  int i;
  for (i = 0; i < array_size(S_0); i++)
    heap_insert(h, INT_TO_POINTER(S_0[i]));
  for (i = 0; i < array_size(S_1); i++)
    heap_insert(h, INT_TO_POINTER(S_1[i]));
  for (i = 0; i < array_size(S_2); i++)
    heap_insert(h, INT_TO_POINTER(S_2[i]));
  for (i = 0; i < array_size(S_3); i++)
    heap_insert(h, INT_TO_POINTER(S_3[i]));
  for (i = 0; i < array_size(S_4); i++)
    heap_insert(h, INT_TO_POINTER(S_4[i]));
  for (i = 0; i < array_size(S_5); i++)
    heap_insert(h, INT_TO_POINTER(S_5[i]));
  for (i = 0; i < array_size(S_6); i++)
    heap_insert(h, INT_TO_POINTER(S_6[i]));
  for (i = 0; i < array_size(S_7); i++)
    heap_insert(h, INT_TO_POINTER(S_7[i]));
  for (i = 0; i < array_size(S_8); i++)
    heap_insert(h, INT_TO_POINTER(S_8[i]));
  for (i = 0; i < array_size(S_9); i++)
    heap_insert(h, INT_TO_POINTER(S_9[i]));

  int *_S = calloc((size_t)n, sizeof(int));

  i = 0;
  int _min = 0;
  while (!heap_empty(h)) {
    int min = POINTER_TO_INT(heap_extract_min(h));
    if (_min != min)
      _S[i++] = _min = min;
  }
  object_free((Object *)h);

  assert_equals(i, n);
  assert_memcmp(S, _S);
  free(_S);
}

void question_4_15(void) {
  puts("question_4_15: not implemented");
  int S[] = { 216, 126, 253, 231, 161, 76,  104, 60,  112, 190,
              250, 138, 115, 120, 25,  173, 141, 245, 195, 238 };
}

void question_4_16(void) {
  puts("question_4_16");
  int S[] = { 216, 126, 253, 231, 161, 76,  104, 60,  112, 190,
              250, 138, 115, 120, 25,  173, 141, 245, 195, 238 };
  assert_equals(quickselect(S, array_size(S), 10), 161);
}

void dutch_national_flag_problem(ColorArray *c) {
  size_t low = 0, middle = 0, high = color_array_length(c) - 1;
  while (middle <= high)
    switch (color_array_examine(c, middle)) {
    case Red:
      color_array_swap(c, low++, middle++);
      break;
    case White:
      middle++;
      break;
    case Blue:
      color_array_swap(c, middle, high--);
      break;
    }
}

void question_4_18(void) {
  puts("question_4_18");

  Color colors[] = {
    Red, White, Blue, Blue, White, White, Red, White, Red, Blue
  };
  Color sorted[] = {
    Red, Red, Red, White, White, White, White, Blue, Blue, Blue
  };

  ColorArray *c = color_array_new(colors, array_size(colors));
  dutch_national_flag_problem(c);
  assert_memcmp(colors, sorted);
  object_free((Object *)c);
}

void three_way_partition(int a[], size_t length) {
  size_t low = 0, middle = 0, high = length - 1;
  while (middle <= high)
    if (a[middle] < 0)
      swap(&a[low++], &a[middle++]);
    else if (a[middle] == 0)
      middle++;
    else
      swap(&a[middle], &a[high--]);
}

void question_4_20(void) {
  puts("question_4_20");

  int a[] = { 0,  -4, 7,  8,  -1, 7, -1, -1, 0, -4,
              -8, -2, -2, -9, 1,  4, -6, -6, 3, -4 };
  int ordering[] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2
  };

  three_way_partition(a, array_size(a));
  size_t i;
  for (i = 0; i < array_size(a); i++)
    assert_equals(ordering[i], a[i] < 0 ? 0 : a[i] == 0 ? 1 : 2);
}

/*
static bool non_zero(int x) { return x != 0; }
static void sort_visitor(int * a, void * p, void * x) {
        size_t i;
        for (i = 0; i < POINTER_TO_INT(((KeyValuePair *)x)->v); i++)
                a[j++] = POINTER_TO_INT(((KeyValuePair *)x)->k);
}
*/

void binary_tree_sort(int a[], size_t length) {
  puts("not implemented...");
  /*
    contract_weak_requires(all_int(a, length, non_zero));
    BinaryTree *b = binary_tree_new(compare_int_pointer);
    size_t i;
    for (i = 0; i < length; i++) {
      int count = POINTER_TO_INT(
          dictionary_search((Dictionary *)b, INT_TO_POINTER(a[i])));
      if (count == POINTER_TO_INT(NULL))
        dictionary_insert((Dictionary *)b, INT_TO_POINTER(a[i]),
                          INT_TO_POINTER(count + 1));
      else
        dictionary_reassign((Dictionary *)b, INT_TO_POINTER(a[i]),
                            INT_TO_POINTER(count + 1));
    }

    size_t j = 0;

    Iterator *it = tree_in_order((Tree *)b);
    iterator_foreach(it, sort_visitor, NULL);
    object_free((Object *)it);
    object_free((Object *)b);
  */
}

void test_binary_tree_sort(void) {
  puts("test_binary_tree_sort");
  test_sort(binary_tree_sort);
}

void question_4_23(void) {
  puts("question_4_23");
  int unsorted[] = { 7, 5, 9, 7, 5, 5, 4, 6, 1, 3, 2, 9, 9, 8, 5, 7, 2, 3, 2, 5,
                     7, 9, 7, 9, 8, 5, 8, 9, 1, 6, 9, 9, 3, 1, 1, 8, 1, 7, 4, 1,
                     2, 7, 1, 7, 6, 9, 5, 3, 6, 2, 2, 9, 1, 2, 7, 6, 6, 3, 7, 3,
                     2, 8, 2, 8, 7, 1, 4, 7, 9, 9, 1, 4, 9, 6, 9, 9, 6, 6, 5, 4,
                     9, 4, 4, 6, 3, 1, 4, 1, 6, 1, 9, 9, 3, 2, 9, 1, 2, 9, 9, 8,
                     2, 9, 3, 3, 3, 2, 1, 8, 5, 7, 4, 9, 1, 3, 2, 7, 1, 3, 3, 1,
                     6, 9, 5, 6, 1, 4, 5, 7, 5, 9, 1, 4, 7, 7, 8, 6, 4, 1, 9, 1,
                     5, 8, 5, 5, 7, 9, 2, 4, 7, 1, 3, 1, 6, 7, 7, 3, 4, 9, 3, 9,
                     9, 8, 8, 9, 4, 2, 4, 5, 3, 5, 4, 5, 2, 8, 7, 4, 3, 6, 1, 5,
                     4, 6, 7, 8, 4, 7, 1, 8, 6, 1, 9, 4, 2, 6, 3, 7, 7, 1, 8, 4,
                     1, 3, 8, 9, 3, 3, 7, 2, 4, 6, 6, 8, 7, 1, 9, 2, 1, 6, 5, 4,
                     2, 3, 9, 6, 4, 8, 6, 5, 1, 2, 2, 2, 9, 9, 9, 6, 5, 4, 1, 3,
                     3, 7, 9, 8, 1, 3, 4, 1, 3, 1, 9, 2, 9, 2, 5 };
  int sorted[] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
                   2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                   2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                   3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                   4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5,
                   5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                   6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
                   6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
                   7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8,
                   8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9,
                   9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                   9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9 };
  binary_tree_sort(unsorted, array_size(unsorted));
  // assert_memcmp(unsorted, sorted);
}

void question_4_24(void) {
  puts("question_4_24");
  int unsorted[] = {
    1,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,   5,  5,  6,  6,  6,  7,  7,  7,
    8,  8,  9,  9,  10, 10, 11, 11, 11, 12, 12,  13, 13, 14, 14, 14, 14, 15, 15,
    15, 15, 16, 16, 16, 17, 17, 18, 18, 19, 20,  20, 20, 20, 20, 21, 21, 21, 23,
    23, 25, 25, 25, 25, 26, 26, 26, 27, 27, 27,  28, 29, 29, 29, 29, 30, 31, 32,
    32, 32, 33, 33, 33, 34, 35, 36, 36, 38, 38,  38, 39, 39, 39, 40, 40, 40, 40,
    40, 40, 41, 41, 41, 42, 42, 43, 43, 44, 44,  45, 46, 46, 47, 47, 48, 49, 49,
    50, 50, 51, 52, 52, 54, 54, 54, 54, 54, 54,  55, 56, 57, 57, 58, 58, 58, 59,
    59, 60, 60, 61, 62, 62, 62, 62, 63, 63, 64,  65, 66, 68, 68, 69, 70, 70, 70,
    71, 71, 72, 73, 73, 74, 74, 74, 74, 74, 74,  75, 75, 75, 75, 76, 76, 76, 76,
    78, 78, 78, 78, 79, 79, 79, 79, 79, 79, 80,  80, 81, 82, 82, 82, 83, 84, 85,
    85, 85, 85, 85, 85, 85, 85, 86, 87, 88, 88,  88, 88, 88, 88, 88, 88, 88, 89,
    90, 91, 91, 91, 92, 92, 92, 92, 92, 92, 92,  93, 94, 94, 94, 95, 96, 96, 97,
    97, 97, 97, 97, 97, 98, 98, 99, 99, 99, 100, 7,  90, 63, 10, 35, 28, 74, 6,
    6,  48, 2,  13, 39, 99, 79, 54
  };
  int sorted[] = {
    1,  1,  1,  2,  2,  2,  3,  3,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  6,
    7,  7,  7,  7,  8,  8,  9,  9,  10, 10, 10, 11, 11, 11, 12, 12, 13, 13, 13,
    14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 17, 17, 18, 18, 19, 20, 20, 20,
    20, 20, 21, 21, 21, 23, 23, 25, 25, 25, 25, 26, 26, 26, 27, 27, 27, 28, 28,
    29, 29, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38,
    38, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 41, 41, 41, 42, 42, 43, 43, 44,
    44, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 52, 52, 54, 54, 54, 54,
    54, 54, 54, 55, 56, 57, 57, 58, 58, 58, 59, 59, 60, 60, 61, 62, 62, 62, 62,
    63, 63, 63, 64, 65, 66, 68, 68, 69, 70, 70, 70, 71, 71, 72, 73, 73, 74, 74,
    74, 74, 74, 74, 74, 75, 75, 75, 75, 76, 76, 76, 76, 78, 78, 78, 78, 79, 79,
    79, 79, 79, 79, 79, 80, 80, 81, 82, 82, 82, 83, 84, 85, 85, 85, 85, 85, 85,
    85, 85, 86, 87, 88, 88, 88, 88, 88, 88, 88, 88, 88, 89, 90, 90, 91, 91, 91,
    92, 92, 92, 92, 92, 92, 92, 93, 94, 94, 94, 95, 96, 96, 97, 97, 97, 97, 97,
    97, 98, 98, 99, 99, 99, 99, 100
  };

  int unsorted_length = 16;
  quicksort(&unsorted[239], (size_t)unsorted_length);
  merge(unsorted, 0, (int)(array_size(unsorted) - unsorted_length - 1),
        array_size(unsorted) - 1);
  assert_memcmp(unsorted, sorted);
}

void question_4_25(void) {
  puts("question_4_25");
  int unsorted[] = {
    42096, 42096, 42096, 48412, 42096, 58035, 42096, 48412, 40842, 40842, 40842,
    58035, 42096, 48412, 58035, 48412, 40842, 48412, 48412, 42096, 48412, 48412,
    48412, 58035, 42096, 48412, 58035, 58035, 48412, 42096, 40842, 42096, 58035,
    40842, 48412, 58035, 58035, 42096, 42096, 42096, 48412, 40842, 42096, 58035,
    40842, 42096, 48412, 42096, 40842, 48412, 40842, 48412, 40842, 48412, 58035,
    42096, 48412, 58035, 42096, 48412, 48412, 42096, 48412, 42096, 48412, 40842,
    48412, 48412, 40842, 48412, 42096, 42096, 42096, 42096, 58035, 40842, 42096,
    40842, 40842, 42096, 42096, 48412, 40842, 58035, 42096, 48412, 42096, 48412,
    42096, 58035, 42096, 48412, 42096, 40842, 42096, 48412, 58035, 48412, 48412,
    40842, 40842, 58035, 42096, 58035, 48412, 58035, 40842, 58035, 42096, 58035,
    42096, 42096, 58035, 48412, 58035, 42096, 42096, 58035, 40842, 58035, 48412,
    40842, 58035, 58035, 40842, 58035, 58035, 40842, 40842, 42096, 40842, 42096,
    42096, 40842, 58035, 48412, 40842, 48412, 40842, 42096, 48412, 40842, 58035,
    48412, 48412, 48412, 42096, 42096, 40842, 42096, 42096, 42096, 40842, 48412,
    58035, 40842, 40842, 42096, 58035, 42096, 58035, 42096, 58035, 48412, 40842,
    40842, 58035, 42096, 42096, 48412, 40842, 40842, 58035, 42096, 48412, 58035,
    42096, 40842, 48412, 42096, 48412, 58035, 40842, 40842, 42096, 58035, 40842,
    48412, 42096, 40842, 58035, 42096, 48412, 58035, 48412, 40842, 58035, 40842,
    42096, 48412, 48412, 58035, 42096, 40842, 58035, 40842, 42096, 42096, 42096,
    40842, 48412, 40842, 48412, 48412, 42096, 48412, 42096, 48412, 40842, 42096,
    40842, 58035, 58035, 58035, 48412, 42096, 48412, 58035, 58035, 40842, 48412,
    48412, 42096, 40842, 42096, 42096, 42096, 40842, 58035, 48412, 42096, 40842,
    42096, 40842, 58035, 42096, 42096, 42096, 42096, 40842, 58035, 42096, 48412,
    48412, 42096
  };
  int sorted[] = {
    40842, 40842, 40842, 40842, 40842, 40842, 40842, 40842, 40842, 40842, 40842,
    40842, 40842, 40842, 40842, 40842, 40842, 40842, 40842, 40842, 40842, 40842,
    40842, 40842, 40842, 40842, 40842, 40842, 40842, 40842, 40842, 40842, 40842,
    40842, 40842, 40842, 40842, 40842, 40842, 40842, 40842, 40842, 40842, 40842,
    40842, 40842, 40842, 40842, 40842, 40842, 40842, 40842, 40842, 40842, 40842,
    40842, 40842, 40842, 42096, 42096, 42096, 42096, 42096, 42096, 42096, 42096,
    42096, 42096, 42096, 42096, 42096, 42096, 42096, 42096, 42096, 42096, 42096,
    42096, 42096, 42096, 42096, 42096, 42096, 42096, 42096, 42096, 42096, 42096,
    42096, 42096, 42096, 42096, 42096, 42096, 42096, 42096, 42096, 42096, 42096,
    42096, 42096, 42096, 42096, 42096, 42096, 42096, 42096, 42096, 42096, 42096,
    42096, 42096, 42096, 42096, 42096, 42096, 42096, 42096, 42096, 42096, 42096,
    42096, 42096, 42096, 42096, 42096, 42096, 42096, 42096, 42096, 42096, 42096,
    42096, 42096, 42096, 42096, 42096, 42096, 48412, 48412, 48412, 48412, 48412,
    48412, 48412, 48412, 48412, 48412, 48412, 48412, 48412, 48412, 48412, 48412,
    48412, 48412, 48412, 48412, 48412, 48412, 48412, 48412, 48412, 48412, 48412,
    48412, 48412, 48412, 48412, 48412, 48412, 48412, 48412, 48412, 48412, 48412,
    48412, 48412, 48412, 48412, 48412, 48412, 48412, 48412, 48412, 48412, 48412,
    48412, 48412, 48412, 48412, 48412, 48412, 48412, 48412, 48412, 48412, 48412,
    48412, 48412, 48412, 48412, 58035, 58035, 58035, 58035, 58035, 58035, 58035,
    58035, 58035, 58035, 58035, 58035, 58035, 58035, 58035, 58035, 58035, 58035,
    58035, 58035, 58035, 58035, 58035, 58035, 58035, 58035, 58035, 58035, 58035,
    58035, 58035, 58035, 58035, 58035, 58035, 58035, 58035, 58035, 58035, 58035,
    58035, 58035, 58035, 58035, 58035, 58035, 58035, 58035, 58035, 58035, 58035,
    58035, 58035
  };
  binary_tree_sort(unsorted, array_size(unsorted));
  // assert_memcmp(unsorted, sorted);
}

static void pswap(bool *a, bool *b) {
  bool t = *b;
  *a = *b, *b = t;
}

void binarysort(bool a[], size_t length) {
  size_t i;
  for (i = 0; i < (length - 1); i++)
    if (a[i + 1] > a[i])
      pswap(&a[i], &a[i + 1]);
}

void question_4_26(void) {
  puts("question_4_26: not implemented");

  bool unsorted[] = {
    1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0
  };
  bool sorted[] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
}

void question_4_27(void) { puts("question_4_27: not implemented"); }

static int max_shifted(const int A[], size_t length, size_t k) {
  return A[(length + k - 1) % length];
}

static size_t _find_k(const int A[], size_t l, size_t h) {
  if ((h - l) == 1)
    return A[l] < A[h] ? l : h;
  size_t m = (l + h) / 2;
  return A[l] > A[m] ? _find_k(A, l, m) : _find_k(A, m, h);
}

static size_t find_k(const int A[], size_t length) {
  return A[0] < A[length - 1] ? 0 : _find_k(A, 0, length - 1);
}

void question_4_31(void) {
  puts("question_4_31");

  int A_2[] = { 35, 42, 5, 15, 27, 29 };
  int A_4[] = { 27, 29, 35, 42, 5, 15 };

  assert_equals(max_shifted(A_2, array_size(A_2), 2), 42);
  assert_equals(max_shifted(A_4, array_size(A_4), 4), 42);

  assert_equals(max_shifted(A_2, array_size(A_2), find_k(A_2, array_size(A_2))),
                42);
  assert_equals(max_shifted(A_4, array_size(A_4), find_k(A_4, array_size(A_4))),
                42);
}

static bool _find_matching_index(const int A[], size_t l, size_t h) {
  if (l > h)
    return false;
  size_t m = (l + h) / 2;
  if (A[m] == m)
    return (bool)m;
  return m > A[m] ? m == 0 ? false : _find_matching_index(A, l, m - 1)
                           : _find_matching_index(A, m + 1, h);
}

static bool find_matching_index(const int A[], size_t length) {
  return _find_matching_index(A, 0, length - 1);
}

void question_4_33(void) {
  puts("question_4_33");

  // using 0 as first index instead of 1 as in the question...
  int A_0[] = { -10, -3, 2, 5, 7 };
  int A_1[] = { 2, 3, 4, 5, 6, 7 };

  assert_true(find_matching_index(A_0, array_size(A_0)));
  assert_false(find_matching_index(A_1, array_size(A_1)));
}

void question_4_34(void) {
  puts("question_4_34: not implemented");

  size_t m = 20, n = 10;
  int A_0[] = { 2, 3, 4, 8, 12, 13, 14, 16, 18, 20 };
  int A_1[] = { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
}

typedef struct {
  size_t n;
  size_t m;
} Point;

static Point matrix_search(int M[][8], size_t n, size_t m, int k) {
  size_t i = 0, j = m - 1;
  while (i < n) {
    if (M[i][j] > k)
      j--;
    else if (M[i][j] < k)
      i++;
    else {
      Point p = { i, j };
      return p;
    }
  }
  Point null = { n, m };
  return null;
}

void question_4_35(void) {
  puts("question_4_35");

  const size_t n = 16, m = 8;
  int M[][8] = { { 13, 14, 18, 29, 29, 40, 52, 64 },
                 { 18, 29, 39, 39, 52, 63, 76, 76 },
                 { 22, 32, 52, 57, 61, 75, 92, 101 },
                 { 29, 46, 59, 65, 81, 88, 96, 114 },
                 { 40, 55, 73, 88, 99, 111, 115, 115 },
                 { 49, 68, 81, 91, 111, 120, 133, 135 },
                 { 61, 72, 86, 93, 120, 121, 141, 143 },
                 { 72, 76, 86, 93, 121, 121, 154, 158 },
                 { 75, 82, 86, 106, 129, 133, 160, 172 },
                 { 89, 95, 111, 126, 142, 157, 174, 180 },
                 { 102, 102, 117, 135, 154, 166, 178, 183 },
                 { 105, 111, 118, 141, 159, 169, 188, 193 },
                 { 113, 122, 131, 157, 164, 182, 190, 194 },
                 { 117, 135, 147, 168, 183, 190, 201, 214 },
                 { 120, 139, 147, 184, 195, 207, 211, 216 },
                 { 127, 153, 155, 192, 201, 208, 219, 228 } };
  Point p = matrix_search(M, n, m, 27);
  assert_equals((int)p.n, 16);
  assert_equals((int)p.m, 8);
  p = matrix_search(M, n, m, 29);
  assert_equals((int)p.n, 0);
  assert_equals((int)p.m, 4);
  p = matrix_search(M, n, m, 180);
  assert_equals((int)p.n, 9);
  assert_equals((int)p.m, 7);
  p = matrix_search(M, n, m, 158);
  assert_equals((int)p.n, 7);
  assert_equals((int)p.m, 7);
  p = matrix_search(M, n, m, 156);
  assert_equals((int)p.n, n);
  assert_equals((int)p.m, m);
}

void question_4_45(void) { puts("question_4_45: not implemented"); }

typedef enum {
  Light = 0,
  Normal = 1,
  Heavy = 2
} Coin;

typedef struct {
  size_t i;
  Coin c;
} CoinPair;

static Coin compare_coins(Coin a[], Coin b[], size_t length) {
  size_t i;
  for (i = 0; i < length; i++)
    if (a[i] != b[i])
      return (Coin)(a[i] > b[i] ? 0 : 2);
  return (Coin)1;
}

static CoinPair find_fake_coin(Coin C[], size_t length) {
  Coin set_0[] = { C[0], C[1], C[2], C[9] };
  Coin set_1[] = { C[3], C[4], C[5], C[10] };
  Coin set_2[] = { C[0], C[1], C[2], C[10] };
  Coin set_3[] = { C[6], C[7], C[8], C[9] };
  Coin set_4[] = { C[0], C[3], C[6], C[9] };
  Coin set_5[] = { C[2], C[5], C[8], C[11] };
  CoinPair table[3][3][3] = { { { { 1, Heavy }, { 2, Heavy }, { 3, Heavy } },
                                { { 6, Light }, { 5, Light }, { 4, Light } },
                                { { 10, Light }, { 11, Heavy }, {} } },
                              { { { 9, Light }, { 8, Light }, { 7, Light } },
                                { { 12, Light }, {}, { 12, Heavy } },
                                { { 7, Heavy }, { 8, Heavy }, { 9, Heavy } } },
                              { { {}, { 11, Light }, { 10, Heavy } },
                                { { 4, Heavy }, { 5, Heavy }, { 6, Heavy } },
                                { { 3, Light }, { 2, Light },
                                  { 1, Light } } } };
  assert_equals(table[0][0][0].c, Heavy);
  assert_equals((int)table[0][0][0].i, 1);
  assert_equals(table[0][0][1].c, Heavy);
  assert_equals((int)table[0][0][1].i, 2);
  assert_equals(table[0][0][2].c, Heavy);
  assert_equals((int)table[0][0][2].i, 3);
  assert_equals(table[0][1][0].c, Light);
  assert_equals((int)table[0][1][0].i, 6);
  assert_equals(table[0][1][1].c, Light);
  assert_equals((int)table[0][1][1].i, 5);
  assert_equals(table[0][1][2].c, Light);
  assert_equals((int)table[0][1][2].i, 4);
  assert_equals(table[0][2][0].c, Light);
  assert_equals((int)table[0][2][0].i, 10);
  assert_equals(table[0][2][1].c, Heavy);
  assert_equals((int)table[0][2][1].i, 11);
  assert_equals(table[1][0][0].c, Light);
  assert_equals((int)table[1][0][0].i, 9);
  assert_equals(table[1][0][1].c, Light);
  assert_equals((int)table[1][0][1].i, 8);
  assert_equals(table[1][0][2].c, Light);
  assert_equals((int)table[1][0][2].i, 7);
  assert_equals(table[1][1][0].c, Light);
  assert_equals((int)table[1][1][0].i, 12);
  assert_equals(table[1][1][2].c, Heavy);
  assert_equals((int)table[1][1][2].i, 12);
  assert_equals(table[1][2][0].c, Heavy);
  assert_equals((int)table[1][2][0].i, 7);
  assert_equals(table[1][2][1].c, Heavy);
  assert_equals((int)table[1][2][1].i, 8);
  assert_equals(table[1][2][2].c, Heavy);
  assert_equals((int)table[1][2][2].i, 9);
  assert_equals(table[2][0][1].c, Light);
  assert_equals((int)table[2][0][1].i, 11);
  assert_equals(table[2][0][2].c, Heavy);
  assert_equals((int)table[2][0][2].i, 10);
  assert_equals(table[2][1][0].c, Heavy);
  assert_equals((int)table[2][1][0].i, 4);
  assert_equals(table[2][1][1].c, Heavy);
  assert_equals((int)table[2][1][1].i, 5);
  assert_equals(table[2][1][2].c, Heavy);
  assert_equals((int)table[2][1][2].i, 6);
  assert_equals(table[2][2][0].c, Light);
  assert_equals((int)table[2][2][0].i, 3);
  assert_equals(table[2][2][1].c, Light);
  assert_equals((int)table[2][2][1].i, 2);
  assert_equals(table[2][2][2].c, Light);
  assert_equals((int)table[2][2][2].i, 1);
  return table[compare_coins(set_0, set_1, array_size(set_0))]
              [compare_coins(set_2, set_3, array_size(set_2))]
              [compare_coins(set_4, set_5, array_size(set_4))];
}

void question_4_46(void) {
  puts("question_4_46: partial implementation");

  Coin heavier_coins[] = { Normal, Normal, Normal, Normal, Heavy,  Normal,
                           Normal, Normal, Normal, Normal, Normal, Normal };
  Coin lighter_coins[] = { Normal, Normal, Normal, Normal, Normal, Normal,
                           Normal, Normal, Normal, Normal, Light,  Normal };
  /*
        CoinPair r = find_fake_coin(heavier_coins, array_size(heavier_coins));
        assert_equals(r.i, 5);
        assert_equals(r.c, Heavy);
        r = find_fake_coin(lighter_coins, array_size(lighter_coins));
        assert_equals(r.i, 11);
        assert_equals(r.c, Light);
        */
}
@
